{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\my_developments\\\\Amalgum\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\my_developments\\\\Amalgum\\\\src\\\\posts.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      {\\n        allPosts {\\n          id\\n          title\\n          author{\\n            name\\n          }\\n          description\\n          url\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Post from './post';\n\nvar Posts = function Posts() {\n  return React.createElement(Query, {\n    query: gql(_templateObject()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data;\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Loading...\");\n    if (error) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Error :(\");\n    return data.allPosts.map(function (currentPost) {\n      return React.createElement(Post, {\n        post: currentPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      });\n    });\n  });\n};\n\nexport default Posts;","map":{"version":3,"sources":["C:\\my_developments\\Amalgum\\src\\posts.js"],"names":["React","Query","gql","Post","Posts","loading","error","data","allPosts","map","currentPost"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,SACZ,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEF,GAAF,mBADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeG,gBAA8B;AAAA,QAA3BG,OAA2B,QAA3BA,OAA2B;AAAA,QAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC7B,QAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,WAAOC,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB,UAACC,WAAD;AAAA,aACvB,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADuB;AAAA,KAAlB,CAAP;AAGD,GAtBH,CADY;AAAA,CAAd;;AA2BA,eAAeN,KAAf","sourcesContent":["import React from 'react'\r\nimport { Query } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\nimport Post from './post'\r\n\r\nconst Posts = () => (\r\n  <Query\r\n    query={gql`\r\n      {\r\n        allPosts {\r\n          id\r\n          title\r\n          author{\r\n            name\r\n          }\r\n          description\r\n          url\r\n        }\r\n      }\r\n    `}\r\n  >\r\n    {({ loading, error, data }) => {\r\n      if (loading) return <p>Loading...</p>\r\n      if (error) return <p>Error :(</p>\r\n\r\n      return data.allPosts.map((currentPost) => (\r\n        <Post post={currentPost} />\r\n      ))\r\n    }}\r\n  </Query>\r\n)\r\n\r\nexport default Posts\r\n"]},"metadata":{},"sourceType":"module"}